defmodule :"Elixir.CaseManager.Repo.Migrations.V2-schema" do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :first_name, :text
      add :last_name, :text
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
      add :role, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id, :uuid
    end

    create table(:token, primary_key: false) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:team, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:user) do
      modify :team_id,
             references(:team,
               column: :id,
               name: "user_to_team_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    create unique_index(:user, [:email], name: "user_unique_email_index")

    alter table(:team) do
      add :name, :text, null: false
      add :type, :text, null: false, default: "customer"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:setting, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :key, :text, null: false
      add :value, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:setting, [:key], name: "setting_key_index")

    create table(:phone, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :country_code, :text
      add :phone, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:team,
            column: :id,
            name: "phone_to_team_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create table(:ip, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :ip, :text, null: false
      add :version, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:team,
            column: :id,
            name: "ip_to_team_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create table(:file, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :filename, :text, null: false
      add :content_type, :text, null: false
      add :binary_data, :binary, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :setting_id,
          references(:setting,
            column: :id,
            name: "file_to_setting_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          )

      add :case_id, :uuid
    end

    create table(:email, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:team,
            column: :id,
            name: "email_to_team_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create table(:comment, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :body, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :case_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create table(:case_alert, primary_key: false) do
      add :case_id, :uuid, null: false, primary_key: true
      add :alert_id, :uuid, null: false, primary_key: true
    end

    create table(:case, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:file) do
      modify :case_id,
             references(:case,
               column: :id,
               name: "file_to_case_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    alter table(:comment) do
      modify :case_id,
             references(:case,
               column: :id,
               name: "comment_to_case_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )

      modify :user_id,
             references(:user,
               column: :id,
               name: "comment_to_user_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    alter table(:case_alert) do
      modify :case_id,
             references(:case,
               column: :id,
               name: "case_alert_to_case_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    alter table(:case) do
      add :title, :text, null: false
      add :description, :text
      add :escalated, :boolean, null: false
      add :internal_note, :text
      add :status, :text, null: false, default: "in_progress"
      add :priority, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :reporter_id,
          references(:user,
            column: :id,
            name: "case_to_reporter_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :nilify_all,
            on_update: :update_all
          )

      add :assignee_id,
          references(:user,
            column: :id,
            name: "case_to_assignee_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :nilify_all,
            on_update: :update_all
          )

      add :team_id,
          references(:team,
            column: :id,
            name: "case_to_team_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create table(:alert, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:case_alert) do
      modify :alert_id,
             references(:alert,
               column: :id,
               name: "case_alert_to_alert_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all,
               on_update: :update_all
             )
    end

    alter table(:alert) do
      add :alert_id, :text, null: false
      add :title, :text, null: false
      add :description, :text
      add :creation_time, :utc_datetime, null: false
      add :link, :text, null: false
      add :risk_level, :text, null: false
      add :additional_data, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:team,
            column: :id,
            name: "alert_to_team_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end
  end

  def down do
    drop constraint(:alert, "alert_to_team_fkey")

    alter table(:alert) do
      remove :team_id
      remove :updated_at
      remove :inserted_at
      remove :additional_data
      remove :risk_level
      remove :link
      remove :creation_time
      remove :description
      remove :title
      remove :alert_id
    end

    drop constraint(:case_alert, "case_alert_to_alert_fkey")

    alter table(:case_alert) do
      modify :alert_id, :uuid
    end

    drop table(:alert)

    drop constraint(:case, "case_to_reporter_fkey")

    drop constraint(:case, "case_to_assignee_fkey")

    drop constraint(:case, "case_to_team_fkey")

    alter table(:case) do
      remove :team_id
      remove :assignee_id
      remove :reporter_id
      remove :updated_at
      remove :inserted_at
      remove :priority
      remove :status
      remove :internal_note
      remove :escalated
      remove :description
      remove :title
    end

    drop constraint(:case_alert, "case_alert_to_case_fkey")

    alter table(:case_alert) do
      modify :case_id, :uuid
    end

    drop constraint(:comment, "comment_to_case_fkey")

    drop constraint(:comment, "comment_to_user_fkey")

    alter table(:comment) do
      modify :user_id, :uuid
      modify :case_id, :uuid
    end

    drop constraint(:file, "file_to_case_fkey")

    alter table(:file) do
      modify :case_id, :uuid
    end

    drop table(:case)

    drop table(:case_alert)

    drop table(:comment)

    drop constraint(:email, "email_to_team_fkey")

    drop table(:email)

    drop constraint(:file, "file_to_setting_fkey")

    drop table(:file)

    drop constraint(:ip, "ip_to_team_fkey")

    drop table(:ip)

    drop constraint(:phone, "phone_to_team_fkey")

    drop table(:phone)

    drop_if_exists unique_index(:setting, [:key], name: "setting_key_index")

    drop table(:setting)

    alter table(:team) do
      remove :updated_at
      remove :inserted_at
      remove :type
      remove :name
    end

    drop_if_exists unique_index(:user, [:email], name: "user_unique_email_index")

    drop constraint(:user, "user_to_team_fkey")

    alter table(:user) do
      modify :team_id, :uuid
    end

    drop table(:team)

    drop table(:token)

    drop table(:user)
  end
end
